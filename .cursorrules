# 指示

ユーザーとの対話中に、このプロジェクトで再利用可能な情報（例：ライブラリのバージョン、モデル名）、特にあなたが犯したミスや受けた修正に関する情報を見つけた場合は、`Lessons`セクションに記録して、同じミスを繰り返さないようにしましょう。

また、このファイルをスクラッチパッドとして使用して、考えを整理しましょう。特に新しいタスクを受け取った場合は、まずスクラッチパッドの内容を確認し、必要に応じて古い異なるタスクをクリアし、タスクを説明してから、タスクを完了するために必要な手順を計画します。進捗状況を示すためにTODOマーカーを使用できます。例：
[X] タスク1
[ ] タスク2

サブタスクを完了したら、スクラッチパッドでタスクの進捗状況も更新してください。
特にマイルストーンを完了した場合、スクラッチパッドを使用して振り返りと計画を行うことで、タスク達成の深さを向上させることができます。
目標は、タスクの全体像と進捗状況を維持することです。次のステップを計画するときは、常にスクラッチパッドを参照してください。

# ツール

すべてのツールはPython3で書かれています。バッチ処理が必要な場合は、Pythonファイルを参照して独自のスクリプトを作成することができます。

## スクリーンショット検証

スクリーンショット検証ワークフローを使用すると、Webページのスクリーンショットを撮影し、LLMを使用してその外観を検証できます。以下のツールが利用可能です：

1. スクリーンショットキャプチャ：
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. 画像を使用したLLM検証：
```bash
venv/bin/python3 tools/llm_api.py --prompt "検証質問" --provider {openai|anthropic} --image path/to/screenshot.png
```

使用例：
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# スクリーンショットを撮影
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# LLMで検証
response = query_llm(
    "このWebページの背景色とタイトルは何ですか？",
    provider="openai",  # または "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

タスクを支援するためのLLMが常に利用可能です。簡単なタスクの場合、以下のコマンドを実行してLLMを呼び出すことができます：
```
venv/bin/python3 ./tools/llm_api.py --prompt "フランスの首都は何ですか？" --provider "anthropic"
```

LLM APIは複数のプロバイダーをサポートしています：
- OpenAI（デフォルト、モデル：gpt-4o）
- Azure OpenAI（モデル：.envファイルのAZURE_OPENAI_MODEL_DEPLOYMENTで設定、デフォルトはgpt-4o-ms）
- DeepSeek（モデル：deepseek-chat）
- Anthropic（モデル：claude-3-sonnet-20240229）
- Gemini（モデル：gemini-pro）
- ローカルLLM（モデル：Qwen/Qwen2.5-32B-Instruct-AWQ）

ただし、通常は`tools/llm_api.py`ファイルの内容を確認し、必要に応じてそのAPIを使用してLLMを呼び出す方が良いでしょう。

## Webブラウザ

`tools/web_scraper.py`ファイルを使用してWebをスクレイピングできます。
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
これにより、Webページの内容が出力されます。

## 検索エンジン

`tools/search_engine.py`ファイルを使用してWebを検索できます。
```bash
venv/bin/python3 ./tools/search_engine.py "検索キーワード"
```
これにより、以下の形式で検索結果が出力されます：
```
URL: https://example.com
Title: 検索結果のタイトル
Snippet: 検索結果のスニペット
```
必要に応じて、`web_scraper.py`ファイルを使用してWebページの内容をスクレイピングすることもできます。

# 教訓

## ユーザー指定の教訓

- ./venvにPython仮想環境があります。Python開発を行う際は常に使用（アクティベート）してください。まず、`which uv`を使用して'uv'が利用可能かどうかを確認します。利用可能な場合は、まず仮想環境をアクティベートし、`uv pip install`を使用してパッケージをインストールします。それ以外の場合は、`pip`を使用してください。
- Windsurfの制限により、`git`と`gh`を使用して複数行のコミットメッセージを送信する必要がある場合は、まずメッセージをファイルに書き込み、`git commit -F <ファイル名>`または同様のコマンドを使用してコミットします。その後、ファイルを削除します。コミットメッセージとPRタイトルに「[Windsurf] 」を含めてください。

## Windsurfが学んだ教訓

- 検索結果では、国際的なクエリに対して異なる文字エンコーディング（UTF-8）を適切に処理するようにしてください
- matplotlibでseabornスタイルを使用する場合、seabornのバージョン変更により、スタイル名として'seaborn'ではなく'seaborn-v0_8'を使用してください
- OpenAIのGPT-4ビジョン機能を使用する場合は、モデル名として'gpt-4o'を使用してください
- 最新のニュースを検索する場合は、前年ではなく現在の年（2025年）を使用するか、単に「最近」というキーワードを使用して最新情報を取得してください

# スクラッチパッド
